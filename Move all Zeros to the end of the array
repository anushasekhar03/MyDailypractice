Problem Statement: You are given an array of integers, your task is to move all the zeros in the array to the end of the array and move non-negative integers to the front
by maintaining their order.
Example 1:
Input:
 1 ,0 ,2 ,3 ,0 ,4 ,0 ,1
Output:
 1 ,2 ,3 ,4 ,1 ,0 ,0 ,0
Explanation:
 All the zeros are moved to the end and non-negative integers are moved to front by maintaining order
Solution 1:
Brute Force Approach: 
1.Create a temp array and move all non zero elements into it
2. Add all non zero elem into new array with upto size of non zero elemtns
3.remaining size will fill with zeros


package array;
import java.util.*;
public class zerostoend {
	public static void main(String[] args) {
		int arr[]= {1,2,0,4,6,0,3,0};
		 int ans[]=zerostoend( arr,7);
		 System.out.println("after moving zeros to end:");
		 for(int i=0;i<arr.length;i++) {
			 System.out.print(ans[i]+ " ");
		 }
		 System.out.println();
	}
	static int []zerostoend(int arr[],int n){
		ArrayList<Integer>list=new ArrayList<>();
		for(int i=0;i<n;i++) {
			if(arr[i]!=0) {
			list.add(arr[i]);
		}
		}
		int nz=list.size();
		for(int i=0;i<nz;i++) {
			arr[i]=list.get(i);
		}
		for(int i=nz;i<n;i++) {
			arr[i]=0;
		}
		return arr;
	}
}
SOLUTION 2-Optimal Approach(Using 2 pointers): 
